service: serverless-social-media-app
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: ap-south-1

plugins:
  - serverless-iam-roles-per-function

functions:
  authorizer:
    handler: lambda_functions/auth_handler.authorizer    

  userLogin:
    handler: lambda_functions/login_signup_handler.userLogin
    environment: 
      MAIN_TABLE: !Ref SSMAMainTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: 
          - !GetAtt SSMAMainTable.Arn
          - !Sub "${SSMAMainTable.Arn}/index/InvertedIndex"
    events:
      - http:
          method: post
          path: api/auth/login
          cors: true

  userSignUp:
    handler: lambda_functions/login_signup_handler.userSignUp
    environment: 
      MAIN_TABLE: !Ref SSMAMainTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:PutItem
        Resource: 
          - !GetAtt SSMAMainTable.Arn
          - !Sub "${SSMAMainTable.Arn}/index/InvertedIndex"
    events:
      - http:
          method: post
          path: api/auth/signup
          cors: true

  getUserByUsername:
    handler: lambda_functions/user_handler.getUserByUsername
    environment: 
      MAIN_TABLE: !Ref SSMAMainTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: 
          - !GetAtt SSMAMainTable.Arn
          - !Sub "${SSMAMainTable.Arn}/index/InvertedIndex"
    events:
      - http:
          method: get
          path: api/users
          request:
            parameters:
              querystrings:
                username: true
          cors: true

  updateUser:
    handler: lambda_functions/user_handler.updateUser
    environment: 
      MAIN_TABLE: !Ref SSMAMainTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: 
          - !GetAtt SSMAMainTable.Arn
    events:
      - http:
          method: put
          path: api/users/{userId}
          # authorizer: authorizer
          cors: true

  deleteUser:
    handler: lambda_functions/user_handler.deleteUser
    environment: 
      MAIN_TABLE: !Ref SSMAMainTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: 
          - !GetAtt SSMAMainTable.Arn
    events:
      - http:
          method: delete
          path: api/users/{userId}
          # authorizer: authorizer
          cors: true

  createMultipartUpload:
    handler: lambda_functions/s3_handler.createMultipartUpload
    environment: 
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
          - s3:ListBucketMultipartUploads
          - s3:AbortMultipartUpload
          - s3:DeleteObject
          - s3:PutObjectAcl
          - s3:ListMultipartUploadParts
        Resource:
          - "arn:aws:s3:::serverless-social-media-app-v2/*"
          - "arn:aws:s3:::serverless-social-media-app-v2"
    events:
      - http:
          method: post
          path: api/s3/get-upload-id
          # authorizer: authorizer
          cors: true

  getUploadPart:
    handler: lambda_functions/s3_handler.getUploadParts
    environment: 
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
          - s3:ListBucketMultipartUploads
          - s3:AbortMultipartUpload
          - s3:DeleteObject
          - s3:PutObjectAcl
          - s3:ListMultipartUploadParts
        Resource:
          - "arn:aws:s3:::serverless-social-media-app-v2/*"
          - "arn:aws:s3:::serverless-social-media-app-v2"
    events:
      - http:
          method: post
          path: api/s3/get-upload-parts
          # authorizer: authorizer
          cors: true

  completeUpload:
    handler: lambda_functions/s3_handler.completeMultipartUpload
    environment: 
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
          - s3:ListBucketMultipartUploads
          - s3:AbortMultipartUpload
          - s3:DeleteObject
          - s3:PutObjectAcl
          - s3:ListMultipartUploadParts
        Resource:
          - "arn:aws:s3:::serverless-social-media-app-v2/*"
          - "arn:aws:s3:::serverless-social-media-app-v2"
    events:
      - http:
          method: post
          path: api/s3/complete-upload
          # authorizer: authorizer
          cors: true
    
  addFollower:
    handler: lambda_functions/follower_handler.addFollower
    environment: 
      MAIN_TABLE: !Ref SSMAMainTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: 
          - !GetAtt SSMAMainTable.Arn
    events:
      - http:
          method: post
          path: api/users/{userId}/follower/{followerId}
          # authorizer: authorizer
          cors: true

  removeFollower:
    handler: lambda_functions/follower_handler.removeFollower
    environment: 
      MAIN_TABLE: !Ref SSMAMainTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:UpdateItem
        Resource: 
          - !GetAtt SSMAMainTable.Arn
    events:
      - http:
          method: post
          path: api/users/{userId}/follower/{followerId}/unfollow
          # authorizer: authorizer
          cors: true
        
  checkIfFollowingUser:
    handler: lambda_functions/follower_handler.checkIfFollowingUser
    environment: 
      MAIN_TABLE: !Ref SSMAMainTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: 
          - !GetAtt SSMAMainTable.Arn
    events:
      - http:
          method: get
          path: api/users/{userId}/follower/{followerId}
          # authorizer: authorizer
          cors: true


  getFollowers:
    handler: lambda_functions/follower_handler.getFollowers
    environment: 
      MAIN_TABLE: !Ref SSMAMainTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: 
          - !GetAtt SSMAMainTable.Arn
    events:
      - http:
          method: get
          path: api/users/{userId}/follower
          # authorizer: authorizer
          cors: true

  getFollowees:
    handler: lambda_functions/follower_handler.getFollowees
    environment: 
      MAIN_TABLE: !Ref SSMAMainTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: 
          - !GetAtt SSMAMainTable.Arn
          - !Sub "${SSMAMainTable.Arn}/index/InvertedIndex"
    events:
      - http:
          method: get
          path: api/users/{userId}/followee
          # authorizer: authorizer
          cors: true

  createPost:
    handler: lambda_functions/posts_handler.createPost
    environment: 
      MAIN_TABLE: !Ref SSMAMainTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: 
          - !GetAtt SSMAMainTable.Arn
    events:
      - http:
          method: post
          path: api/users/{userId}/posts
          # authorizer: authorizer
          cors: true

  getPosts:
    handler: lambda_functions/posts_handler.getPosts
    environment: 
      MAIN_TABLE: !Ref SSMAMainTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: 
          - !GetAtt SSMAMainTable.Arn
          - !Sub "${SSMAMainTable.Arn}/index/InvertedIndex"
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: 
          - "arn:aws:s3:::serverless-social-media-app-v2/*"
    events:
      - http:
          method: get
          path: api/users/{userId}/posts
          # authorizer: authorizer
          cors: true

  updatePost:
    handler: lambda_functions/posts_handler.updatePost
    environment: 
      MAIN_TABLE: !Ref SSMAMainTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: 
          - !GetAtt SSMAMainTable.Arn
    events:
      - http:
          method: put
          path: api/users/{userId}/posts/{postId}
          # authorizer: authorizer
          cors: true

  deletePost:
    handler: lambda_functions/posts_handler.deletePost
    environment: 
      MAIN_TABLE: !Ref SSMAMainTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: 
          - !GetAtt SSMAMainTable.Arn
    events:
      - http:
          method: delete
          path: api/users/{userId}/posts/{postId}
          # authorizer: authorizer
          cors: true

  likePost:
    handler: lambda_functions/likes_handler.likePost
    environment: 
      MAIN_TABLE: !Ref SSMAMainTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:PutItem
        Resource: 
          - !GetAtt SSMAMainTable.Arn
    events:
      - http:
          method: post
          path: api/users/{userId}/posts/{postId}/like
          # authorizer: authorizer
          cors: true

  unlikePost:
    handler: lambda_functions/likes_handler.unlikePost
    environment: 
      MAIN_TABLE: !Ref SSMAMainTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource: 
          - !GetAtt SSMAMainTable.Arn
    events:
      - http:
          method: delete
          path: api/users/{userId}/posts/{postId}/like
          # authorizer: authorizer
          cors: true

  getPostLike:
    handler: lambda_functions/likes_handler.getPostLike
    environment: 
      MAIN_TABLE: !Ref SSMAMainTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: 
          - !GetAtt SSMAMainTable.Arn
    events:
      - http:
          method: get
          path: api/users/{userId}/posts/{postId}/like
          # authorizer: authorizer
          cors: true


resources:
  Resources:
    UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: serverless-social-media-app-v2
        AccessControl: Private
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - PUT
                - POST
                - HEAD
              AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              ExposedHeaders:
                - ETag  
    SSMAMainTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: SSMA_Main
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: InvertedIndex
            KeySchema:
              - AttributeName: SK
                KeyType: HASH
              - AttributeName: PK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    SSMAFeedTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: SSMA_Feed
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: postId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: postId
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: TimestampIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: timestamp
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
